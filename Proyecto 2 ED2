//Librerias
#include <Arduino.h>
#include <driver/ledc.h>

//Display de 7 segmentos
#define pinA  34
#define pinB  35
#define pinC  32
#define pinD  33
#define pinE  25
#define pinF  26
#define pinG  27
#define pindP  14

#define display1  4
#define display2  2
#define display3  15

//Pines de Leds
const int greenLed = 18;
const int yellowLed = 29;
const int redLed = 21;

//Pin analógica para sensor de temperatura LM35
const int LM35Pin = A0;  

//Boton de inicio
const int buttonPin = 22;

// Definición de configuración PMW
ledc_channel_config_t channel_config; //PMW

// Variables para almacenar la temperatura
int sensorValue = 0;
float temperature = 0.0;

// Variables para las señales PWM
int greenBrightness = 0;
int yellowBrightness = 0;
int redBrightness = 0;
int servoAngle = 0; 

bool measureTemperature = false; //Indicador para medir la temperatura al presionar el boton "Start"



//Definicón de la posición del servo y cambio de color
int posición inicial = 90;
int movimiento = 15; 
int cammbioColor = 0; //0: apagado; 1:verde; 2:amarillo; 3:rojo;
int cambioServo = 0;


/*void setup()
{
  Serial.begin(9600);
  pinMode(sensroTemp,INPUT);
  pinMode(servo,OUTPUT);
}

void loop () {
  delay(100);

  if (digitalRead (buttonStart) == HIGH);
}

void loop() 
{
Value = analogRead(sensorTemp);
Temperature = ( Value * 5.0 * 100.0)/1023.0;
if(Temperature < 37)
{
  digitalWrite(greenLed,HIGH);
}
else if (Temperatura 37 < && < 37.5 )
{
  digitalWrite(yellowLed,HIGH);
}
else if (Temperature < 37.5)
{
    digitalWrite(redLed,HIGH);
}
  Serial.println(Temperature);
  delay(50)
}*/

//Parte 1: Sensor de temperatura
//Parte 2: Semáforo de temperatura 
//Parte 3: Reloj de semáforo de temperatura
 
void setup() {
  Serial.begin(115200);

  // Configurar leds como salidas
  pinMode(greenLed, OUTPUT);
  pinMode(yellowLed, OUTPUT);
  pinMode(greenLed, OUTPUT);

  // Configurar el botón como entrada con resistencia interna
  pinMode(buttonStart, INPUT_PULLUP);


  channel_config.gpio_num = 5;
  channel_config.speed_mode = LEDC_HIGH_SPEED_MODE;
  channel_config.channel = LEDC_CHANNEL_0;
  channel_config.intr_type = LEDC_INTR_DISABLE;
  channel_config.timer_sel = LEDC_TIMER_0;
  channel_config.duty = 75;

  ledc_channel_config(&channel_config); 
  ledc_timer_config_t timer_config; 
  ledc_timer_config(&timer_config);

  timer_config.speed_mode = LEDC_HIGH_SPEED_MODE;
  timer_config.duty_resolution = LEDC_TIMER_10_BIT;
  timer_config.timer_num = LEDC_TIMER_0;
  timer_config.freq_hz = 50; //Frecuencia

ledc_timer_config(&timer_config);
}


void loop() {
  // Leer el estado del botón
  int buttonState = digitalRead(buttonStart);

  // Si se presiona el botón se comienza a medir la temperatura
  if (buttonState == LOW) {
    measureTemperature = true;
  }

  if (measureTemperature) {
    // Leer el valor del sensor LM35
    sensorValue = analogRead(LM35Pin);

    // Convertir el valor del ADC a temperatura en grados Celsius mediante el uso de una formula
    temperature = (sensorValue * 3300.0) / 4095.0; 
    temperature = temperature / 10.0; 

    // Determinar led prendido y angulo del servo segun la temperatura
    if (temperature < 37.0) {
      greenBrightness = 255;
      yellowBrightness = 0;
      redBrightness = 0;
      servoAngle = map(greenBrightness, 77, 255, 25, 58);; // Mover servo a 35°
    } else if (temperature >= 37.0 && temperature < 37.5) {
      greenBrightness = 0;
      yellowBrightness = 255;
      redBrightness = 0;
      servoAngle = map(yellowBrightness, 77, 255, 59, 92);
    } else {
      greenBrightness = 0;
      yellowBrightness = 0;
      redBrightness = 255;
      servoAngle = map(redBrightness, 77, 255, 93, 125);
    }
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_0, servoAngle );
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_0);
    delay(100);
    // Aplicar las señales PWM a los Leds y al servo
    analogWrite(greenLed, greenBrightness);
    analogWrite(yellowLed, yellowBrightness);
    analogWrite(redLed, redBrightness);

    measureTemperature = false; // Reiniciar el sensor luego de medir la temepratura

  delay(100); 
  }
}







//Parte 4: Despliegue de temperatura 


/*void desplegar7seg(uint8_t digito) {
  switch (digito) {
    case 0:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, HIGH);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, LOW);
      break;
    case 1:
      digitalWrite(pinA, LOW);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, LOW);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, LOW);
      digitalWrite(pinG, LOW);
      break;
    case 2:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, LOW);
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, HIGH);
      digitalWrite(pinF, LOW);
      digitalWrite(pinG, HIGH);
      break;
    case 3:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, LOW);
      digitalWrite(pinG, HIGH);
      break;
    case 4:
      digitalWrite(pinA, LOW);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, LOW);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
      break;
    case 5:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, LOW);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
      break;
    case 6:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, LOW);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, HIGH);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
      break;
    case 7:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, LOW);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, LOW);
      digitalWrite(pinG, LOW);
      break;
    case 8:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, HIGH);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
      break;
    case 9:
      digitalWrite(pinA, HIGH);
      digitalWrite(pinB, HIGH);
      digitalWrite(pinC, HIGH);
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, LOW);
      break;
    default:
      break;
  }
} */ 

//Parte 5
//Parte 6
